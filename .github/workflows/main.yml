name: Python Scraper CI

on:
  push:
    branches: [ main, master, develop ] # Adjust branches as needed
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"] # Test on multiple Python version

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies for headless Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xvfb \
          # Minimal deps for running Chrome headless, Dockerfile has a more extensive list for Chrome itself
          # If tests run full selenium, these might need to be expanded or use a service container for chrome
          # For this example, assuming tests are well-mocked or can run with system-provided tools
          # For full browser tests in CI, consider Dockerized services (see below)

    # Optional: Install Chrome and ChromeDriver for full Selenium tests in CI
    # This makes the CI environment closer to the Dockerfile
    - name: Install Google Chrome and ChromeDriver
      run: |
        # Install Google Chrome
        sudo apt-get update
        sudo apt-get install -y wget gnupg
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor | sudo tee /usr/share/keyrings/google-chrome-keyring.gpg > /dev/null
        sudo sh -c 'echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        CHROME_VERSION_FULL=$(google-chrome --version | awk '{print $3}')
        echo "Installed Chrome version: $CHROME_VERSION_FULL"

        # For Chrome 115+, use the new JSON endpoints
        CHROME_MAJOR_VERSION=$(echo "$CHROME_VERSION_FULL" | cut -d. -f1)

        if [ "$CHROME_MAJOR_VERSION" -ge 115 ]; then
          echo "Chrome version is 115 or newer. Using JSON endpoint to find matching ChromeDriver."
          # Get the closest available ChromeDriver version for the installed Chrome version
          CHROMEDRIVER_URL_SUFFIX="LATEST_RELEASE_${CHROME_VERSION_FULL}"
          # Fallback for cases where the exact version might not be immediately available in LATEST_RELEASE_ (e.g. very new Chrome releases)
          # First try the full version, then the major.minor.build, then major.minor, then major.
          CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${CHROME_VERSION_FULL}")
          if [ -z "$CHROMEDRIVER_VERSION" ]; then
            CHROME_VERSION_BUILD=$(echo "$CHROME_VERSION_FULL" | cut -d. -f1-3)
            echo "Exact version not found, trying with build version: ${CHROME_VERSION_BUILD}"
            CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${CHROME_VERSION_BUILD}")
          fi
          if [[ "$CHROMEDRIVER_VERSION" == *"<html"* || -z "$CHROMEDRIVER_VERSION" ]]; then
             CHROME_VERSION_MINOR=$(echo "$CHROME_VERSION_FULL" | cut -d. -f1-2)
             echo "Build version not found or invalid, trying with minor version: ${CHROME_VERSION_MINOR}"
             CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${CHROME_VERSION_MINOR}")
          fi
          if [[ "$CHROMEDRIVER_VERSION" == *"<html"* || -z "$CHROMEDRIVER_VERSION" ]]; then
            echo "Minor version not found or invalid, trying with major version: ${CHROME_MAJOR_VERSION}"
            CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${CHROME_MAJOR_VERSION}")
          fi

          if [[ "$CHROMEDRIVER_VERSION" == *"<html"* || -z "$CHROMEDRIVER_VERSION" ]]; then
            echo "Could not find a suitable ChromeDriver version for Chrome $CHROME_VERSION_FULL via LATEST_RELEASE files."
            echo "Attempting to fetch from known good versions JSON endpoint..."
            # Attempt to get the specific version download URL from the known-good-versions-with-downloads.json
            # This requires parsing JSON, so jq is useful here. Ensure jq is installed or use alternative parsing.
            sudo apt-get install -y jq
            # Find the latest chromedriver for the installed CHROME_VERSION_FULL (up to the build number)
            TARGET_CHROME_VERSION_PREFIX=$(echo "$CHROME_VERSION_FULL" | awk -F. '{print $1"."$2"."$3}')
            # Get the download URL for chromedriver linux64
            CHROMEDRIVER_DOWNLOAD_URL=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json | jq -r --arg prefix "$TARGET_CHROME_VERSION_PREFIX" '.versions[] | select(.version | startswith($prefix)) | .downloads.chromedriver[] | select(.platform=="linux64") | .url' | tail -n1)

            if [ -z "$CHROMEDRIVER_DOWNLOAD_URL" ]; then
                echo "ERROR: Could not determine ChromeDriver download URL for Chrome $CHROME_VERSION_FULL using JSON endpoints."
                exit 1
            else
                echo "Found ChromeDriver download URL: $CHROMEDRIVER_DOWNLOAD_URL"
            fi
          else
            echo "Found LATEST_RELEASE ChromeDriver version: $CHROMEDRIVER_VERSION"
            CHROMEDRIVER_DOWNLOAD_URL="https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${CHROMEDRIVER_VERSION}/linux64/chromedriver-linux64.zip"
          fi
        else
          echo "Chrome version is older than 115. Using legacy method."
          # Get the major version of Chrome
          CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION_FULL | cut -d. -f1)
          # Fetch the corresponding ChromeDriver version (legacy method)
          CHROMEDRIVER_VERSION=$(wget -qO- "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_MAJOR_VERSION")
          CHROMEDRIVER_DOWNLOAD_URL="https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
        fi

        echo "Attempting to download ChromeDriver from: $CHROMEDRIVER_DOWNLOAD_URL"

        # Download and set up ChromeDriver
        wget -O /tmp/chromedriver.zip "$CHROMEDRIVER_DOWNLOAD_URL"
        if [ $? -ne 0 ]; then
          echo "ERROR: Failed to download ChromeDriver from $CHROMEDRIVER_DOWNLOAD_URL"
          # As a last resort, try the old storage URL if the new one failed and we used a LATEST_RELEASE file
          if [ "$CHROME_MAJOR_VERSION" -ge 115 ] && [[ "$CHROMEDRIVER_DOWNLOAD_URL" == *"chrome-for-testing"* ]] && ! [[ "$CHROMEDRIVER_DOWNLOAD_URL" == *"known-good-versions-with-downloads.json"* ]]; then
             OLD_STORAGE_URL="https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
             echo "Falling back to legacy storage URL: $OLD_STORAGE_URL"
             wget -O /tmp/chromedriver.zip "$OLD_STORAGE_URL"
             if [ $? -ne 0 ]; then
                echo "ERROR: Failed to download ChromeDriver from legacy URL as well."
                exit 1
             fi
          else
            exit 1
          fi
        fi

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest # Ensure pytest is explicitly installed if not already via requirements for CI

    - name: Run tests with Pytest (using xvfb for headless display)
      run: |
        # xvfb-run is used if Selenium tests actually launch a browser
        # If tests are fully mocked and don't launch a browser, xvfb-run is not strictly needed
        xvfb-run -a pytest tests/test_scraper.py
        # pytest tests/test_scraper.py # if xvfb not needed for mocked tests
